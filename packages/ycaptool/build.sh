#!/usr/bin/env bash
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
YCAPTOOL_DIR="$SCRIPT_DIR"
PKGS_DIR="$(dirname "$YCAPTOOL_DIR")"
PROJECT_ROOT="$(dirname "$PKGS_DIR")"

BIN_DIR="$YCAPTOOL_DIR/bin"
BUILD_DIR_CLI="$YCAPTOOL_DIR/build-cli"
BUILD_DIR_GUI="$YCAPTOOL_DIR/build"

# Usage
usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

No args  Build both (CLI then GUI)
--cli    Build only ycap-cli (PyInstaller)
--gui    Build only ycaptool GUI (meson/ninja). If ycap-cli is missing, it will be built first.
--clean  Clean build artifacts (build/, build-cli/, dist/, bin/)
--help   Show this help
EOF
}

# Clean
do_clean() {
    echo -e "${YELLOW}Cleaning build directories...${NC}"
    rm -rf "$BUILD_DIR_GUI" "$BUILD_DIR_CLI" "$YCAPTOOL_DIR/dist" "$YCAPTOOL_DIR/__pycache__" "$YCAPTOOL_DIR/ycap-cli.spec"
    if [ -d "$BIN_DIR" ]; then
        rm -rf "$BIN_DIR"
    fi
    echo -e "${GREEN}Clean complete${NC}"
}

# Build ycap-cli
build_cli() {
    echo -e "${YELLOW}Building ycap-cli binary...${NC}"
    mkdir -p "$BIN_DIR"
    mkdir -p "$BUILD_DIR_CLI"

    # .gitignore in bin
    GITIGNORE_FILE="$BIN_DIR/.gitignore"
    if [ ! -f "$GITIGNORE_FILE" ]; then
        echo "# Automatically generated by SpatialShot - compiled binaries" > "$GITIGNORE_FILE"
        echo "*" >> "$GITIGNORE_FILE"
        echo -e "${GREEN}✓ Created $GITIGNORE_FILE${NC}"
    fi

    # deps check
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}Error: python3 is not installed${NC}"
        exit 1
    fi
    if ! command -v pip3 &> /dev/null; then
        echo -e "${RED}Error: pip3 is not installed${NC}"
        exit 1
    fi

    if ! python3 -c "import PyInstaller" 2>/dev/null; then
        echo -e "${YELLOW}Installing PyInstaller...${NC}"
        pip3 install pyinstaller
    fi

    if [ ! -f "$YCAPTOOL_DIR/cli/ycap-cli.py" ]; then
        echo -e "${RED}Error: cli/ycap-cli.py not found at $YCAPTOOL_DIR/cli/ycap-cli.py${NC}"
        exit 1
    fi

    # bundle flameshot if present
    echo -e "${YELLOW}Bundling flameshot binary...${NC}"
    FLAMESHOT_SOURCE="$PROJECT_ROOT/third-party/flameshot/bin/flameshot"
    FLAMESHOT_DEST="$BUILD_DIR_CLI/flameshot"
    if [ -f "$FLAMESHOT_SOURCE" ]; then
        cp "$FLAMESHOT_SOURCE" "$FLAMESHOT_DEST"
        chmod +x "$FLAMESHOT_DEST"
        echo -e "${GREEN}✓ Bundled flameshot from $FLAMESHOT_SOURCE${NC}"
    else
        echo -e "${YELLOW}⚠ Warning: Flameshot not found at $FLAMESHOT_SOURCE${NC}"
        echo -e "${YELLOW}  The binary will use system flameshot if available${NC}"
        touch "$FLAMESHOT_DEST"
    fi

    cd "$YCAPTOOL_DIR"

    # Build with PyInstaller
    echo -e "${YELLOW}Building ycap-cli (PyInstaller)...${NC}"
    pyinstaller \
        --name="ycap-cli" \
        --onefile \
        --add-data "$BUILD_DIR_CLI/flameshot:." \
        --hidden-import="os" \
        --hidden-import="sys" \
        --hidden-import="shutil" \
        --hidden-import="subprocess" \
        --hidden-import="pathlib" \
        --hidden-import="typing" \
        --log-level WARN \
        "$YCAPTOOL_DIR/cli/ycap-cli.py" 2> /dev/null || true
    PYINSTALLER_EXIT_CODE=$?
    echo -e "${GREEN}✓ PyInstaller build complete${NC}"

    if [ $PYINSTALLER_EXIT_CODE -ne 0 ]; then
        echo -e "${RED}Error: PyInstaller command failed (exit code $PYINSTALLER_EXIT_CODE).${NC}"
        exit 1
    fi

    if [ -f "$YCAPTOOL_DIR/dist/ycap-cli" ]; then
        cp "$YCAPTOOL_DIR/dist/ycap-cli" "$BIN_DIR/"
        chmod +x "$BIN_DIR/ycap-cli"
        echo -e "${GREEN}✓ ycap-cli built and installed to $BIN_DIR/ycap-cli${NC}"
    else
        echo -e "${RED}Error: PyInstaller failed to create binary at $YCAPTOOL_DIR/dist/ycap-cli${NC}"
        exit 1
    fi

    # quick smoke test
    echo -e "${YELLOW}Testing ycap-cli binary...${NC}"
    if "$BIN_DIR/ycap-cli" --help >/dev/null 2>&1 || "$BIN_DIR/ycap-cli" --version >/dev/null 2>&1; then
        echo -e "${GREEN}✓ ycap-cli binary works${NC}"
    else
        echo -e "${YELLOW}⚠ ycap-cli binary test inconclusive${NC}"
    fi

    # cleanup pyinstaller build artifacts
    echo -e "${YELLOW}Cleaning up CLI build files...${NC}"
    rm -rf "$BUILD_DIR_CLI" "$YCAPTOOL_DIR/build" "$YCAPTOOL_DIR/dist"
    rm -f "$YCAPTOOL_DIR/ycap-cli.spec"
}

# Build ycaptool GUI (meson)
build_gui() {
    echo -e "${YELLOW}Building ycaptool GUI (GTKMM) and embedding ycap-cli...${NC}"

    # ensure embedded CLI exists and is executable for the resource stage
    if [ ! -f "$BIN_DIR/ycap-cli" ]; then
        echo -e "${YELLOW}ycap-cli not found in $BIN_DIR. Building ycap-cli first...${NC}"
        build_cli
    fi
    chmod +x "$BIN_DIR/ycap-cli"

    # check meson/ninja
    if ! command -v meson >/dev/null 2>&1; then
        echo -e "${RED}Error: meson not found. Install meson and ninja-build.${NC}"
        exit 1
    fi
    if ! command -v ninja >/dev/null 2>&1; then
        echo -e "${RED}Error: ninja not found. Install ninja-build.${NC}"
        exit 1
    fi

    # clean previous GUI build and create build dir
    if [ -d "$BUILD_DIR_GUI" ]; then
        rm -rf "$BUILD_DIR_GUI"
    fi
    mkdir -p "$BUILD_DIR_GUI"

    meson setup "$BUILD_DIR_GUI" "$YCAPTOOL_DIR" --buildtype=release

    echo -e "${YELLOW}Compiling ycaptool (meson/ninja)...${NC}"
    meson compile -C "$BUILD_DIR_GUI" -v
    echo -e "${GREEN}✓ ycaptool meson build complete${NC}"

    if [ ! -f "$BUILD_DIR_GUI/ycaptool" ]; then
        echo -e "${RED}Error: Build failed - no binary found at $BUILD_DIR_GUI/ycaptool${NC}"
        exit 1
    fi

    mkdir -p "$BIN_DIR"
    cp "$BUILD_DIR_GUI/ycaptool" "$BIN_DIR/ycaptool"
    chmod +x "$BIN_DIR/ycaptool"

    echo -e "${GREEN}✓ ycaptool built and installed to $BIN_DIR/ycaptool${NC}"
    echo -e "${GREEN}✓ Embedded ycap-cli located at resource bin/ycap-cli inside the executable${NC}"
}

# Parse args
if [ $# -eq 0 ]; then
    ACTION="both"
else
    case "$1" in
        --cli) ACTION="cli" ;; 
        --gui) ACTION="gui" ;; 
        --clean) ACTION="clean" ;; 
        --help|-h) usage; exit 0 ;; 
        *)
            echo -e "${RED}Invalid argument: $1${NC}"
            usage
            exit 1
            ;;
    esac
fi

# Execute selected action
case "$ACTION" in
    both)
        build_cli
        build_gui
        ;;
    cli)
        build_cli
        ;;
    gui)
        build_gui
        ;;
    clean)
        do_clean
        ;;
esac

exit 0