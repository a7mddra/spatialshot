# place at .github/workflows/build-orchestrator.yml

name: Build Orchestrator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: spatialshot-orchestrator-linux-x86_64
            archive-ext: tar.gz
            binary-name: spatialshot-orchestrator
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: spatialshot-orchestrator-windows-x86_64
            archive-ext: zip
            binary-name: spatialshot-orchestrator.exe
            
          - os: macos-latest 
            target: x86_64-apple-darwin
            artifact-name: spatialshot-orchestrator-macos-x86_64
            archive-ext: tar.gz
            binary-name: spatialshot-orchestrator

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        working-directory: packages/orchestrator

      - name: Prepare artifact directory
        shell: bash
        run: |
          # Create a staging directory
          mkdir -p dist
          
          # Copy the final binary into the staging directory
          cp packages/orchestrator/target/${{ matrix.target }}/release/${{ matrix.binary-name }} dist/

      - name: Archive artifact (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Create a tar.gz archive
          # -C dist: Change to the 'dist' directory before archiving
          # .: Archive all files in that directory
          # This ensures the binary is at the root of the archive
          tar -czf ${{ matrix.artifact-name }}.${{ matrix.archive-ext }} -C dist .
        
      - name: Archive artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create a .zip archive
          Compress-Archive -Path dist/* -DestinationPath ${{ matrix.artifact-name }}.${{ matrix.archive-ext }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}.${{ matrix.archive-ext }}

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.artifact-name }}.${{ matrix.archive-ext }}
