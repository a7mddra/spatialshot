name: "Prepare a static build of Qt 6 (Linux)"
description: "Static Qt 6 builds are not readily available and have to be built from source. This action automates that for Linux."
branding:
  icon: book-open
  color: green

inputs:
  version:
    type: string
    description: "The version of Qt which should be installed, e.g. 6.8.0"
    required: true
    default: "6.8.0"
  configure-args:
    type: string
    description: "Additional arguments passed to Qt configure, e.g. -no-pch -skip qtwebengine"
    required: false
    default: ""
  dir:
    type: string
    description: "The directory where Qt should be installed"
    required: true
    default: "${{ runner.temp }}/Qt-static"
  submodules:
    type: string
    description: "Comma separated list of Qt modules, e.g. qtbase,qtshadertools"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: "Install build dependencies (Ubuntu/Debian)"
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential perl python3 cmake ninja-build git \
          libgl1-mesa-dev libfontconfig1-dev libfreetype6-dev \
          libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev \
          libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev \
          libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev \
          libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev \
          libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libatspi2.0-dev dbus-x11 \
          libpcre2-dev libdbus-1-dev libdbus-1-dev  # <-- ensure DBus headers/libraries available
        echo "Deps installed."

    - name: "Prepare git config to force HTTPS for SSH submodule URLs"
      shell: bash
      run: |
        set -euo pipefail
        git config --global url."https://github.com/".insteadOf "git@github.com:"
        git config --global url."https://code.qt.io/qt/".insteadOf "git@code.qt.io:qt/"

    - name: "Clone qt5 supermodule and checkout v${{ inputs.version }}"
      working-directory: ${{ runner.temp }}
      shell: bash
      run: |
        set -euo pipefail
        QT_SRC="${{ runner.temp }}/qt"
        rm -rf "${QT_SRC}"
        # Qt source is provided from the qt5 supermodule (use the v<version> tag/branch).
        git clone --depth 1 --branch "v${{ inputs.version }}" https://code.qt.io/qt/qt5.git "${QT_SRC}" || {
          # fallback: shallow clone then fetch tags
          git clone --depth 1 https://code.qt.io/qt/qt5.git "${QT_SRC}"
          cd "${QT_SRC}"
          git fetch --tags --prune
          git checkout "v${{ inputs.version }}" || { echo "Failed to checkout v${{ inputs.version }}"; exit 1; }
        }
        cd "${QT_SRC}"
        echo "Checked out $(git describe --tags --always || git rev-parse --short HEAD)"

    - name: "Init repository (try user subset; fallback to default)"
      working-directory: ${{ runner.temp }}/qt
      shell: bash
      run: |
        set -euo pipefail
        # If the caller passed submodules, try them but don't fail the whole job if invalid.
        if [ -n "${{ inputs.submodules }}" ]; then
          echo "Trying init-repository --module-subset=${{ inputs.submodules }} ..."
          if perl init-repository --module-subset="${{ inputs.submodules }}"; then
            echo "init-repository succeeded with provided subset."
          else
            echo "Provided module-subset failed; falling back to default init-repository."
            perl init-repository
          fi
        else
          perl init-repository
        fi
        echo "Now updating submodules (shallow, parallel where possible)..."
        git submodule update --init --recursive --jobs=$(nproc) --depth=1 || true

    - name: "Create build dir, configure (with DBus), build, install"
      working-directory: ${{ runner.temp }}/qt
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p build
        cd build
        echo "Configuring Qt (DBus support enabled by default)..."
        # don't pass -no-dbus; ensure DBus headers are installed on build host
        ../configure -prefix "${{ inputs.dir }}" \
          -release \
          -static \
          -opensource \
          -confirm-license \
          -nomake examples \
          -nomake tests \
          ${{ inputs.configure-args }}
        echo "Building Qt (parallel)..."
        cmake --build . --parallel "$(nproc)"
        echo "Installing Qt to ${{ inputs.dir }}..."
        cmake --install .

    - name: "Verify install"
      shell: bash
      run: |
        set -euo pipefail
        if [ -d "${{ inputs.dir }}" ]; then
          echo "Install dir contents:"
          ls -la "${{ inputs.dir }}" || true
        fi
        if [ -x "${{ inputs.dir }}/bin/qmake" ] || [ -d "${{ inputs.dir }}/lib" ]; then
          echo "Qt installation looks present at ${{ inputs.dir }}"
        else
          echo "Warning: Qt install not detected at ${{ inputs.dir }}. Check earlier logs."
          exit 1
        fi
