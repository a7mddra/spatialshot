name: "Prepare a static build of Qt 6 (Linux)"
description: "Static Qt 6 builds are not readily available and have to be built from source. This action automates that for Linux."
branding:
  icon: book-open
  color: green

inputs:
  version:
    type: string
    description: "The version of Qt which should be installed, e.g. 6.8.0"
    required: true
    default: "6.8.0"
  configure-args:
    type: string
    description: "Additional arguments passed to Qt configure, e.g. -no-dbus -no-opengl"
    required: false
    default: ""
  dir:
    type: string
    description: "The directory where Qt should be installed"
    required: true
    default: "${{ runner.temp }}/Qt-static"
  submodules:
    type: string
    description: "Comma separated list of Qt modules, e.g. qtbase,qtshadertools"
    required: true
    default: "qtbase"

runs:
  using: "composite"
  steps:
    - name: "Install build dependencies (Ubuntu/Debian)"
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential perl python3 cmake ninja-build git \
          libgl1-mesa-dev libfontconfig1-dev libfreetype6-dev \
          libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev \
          libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev \
          libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev \
          libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev \
          libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libatspi2.0-dev dbus-x11 \
          libpcre2-dev libdbus-1-dev
        echo "Deps installed."

    - name: "Clone Qt sources (use qt5 supermodule and checkout v${{ inputs.version }})"
      working-directory: ${{ runner.temp }}
      shell: bash
      run: |
        set -euo pipefail
        QT_SRC_DIR="${{ runner.temp }}/qt"
        echo "Cloning Qt sources into ${QT_SRC_DIR} ..."
        # Try shallow HTTPS clone of the qt5 supermodule (this is the documented way for Qt6).
        if [ -d "${QT_SRC_DIR}" ]; then
          echo "Removing existing ${QT_SRC_DIR}"
          rm -rf "${QT_SRC_DIR}"
        fi
        git clone --branch "v${{ inputs.version }}" --depth 1 https://code.qt.io/qt/qt5.git "${QT_SRC_DIR}" || {
          echo "Branch v${{ inputs.version }} not available as branch; doing full fetch of tags and trying tag checkout..."
          git clone --depth 1 https://code.qt.io/qt/qt5.git "${QT_SRC_DIR}"
          cd "${QT_SRC_DIR}"
          git fetch --tags --prune
          git checkout "v${{ inputs.version }}" || { echo "Failed to checkout v${{ inputs.version }}; aborting"; exit 1; }
        }
        cd "${QT_SRC_DIR}"
        echo "Checked out: $(git rev-parse --abbrev-ref HEAD || git describe --tags --exact-match HEAD || git rev-parse --short HEAD)"

    - name: "Prepare out-of-source build dir and configure (init submodules)"
      working-directory: ${{ runner.temp }}/qt
      shell: bash
      run: |
        set -euo pipefail
        BUILD_DIR="$(pwd)/build"
        mkdir -p "${BUILD_DIR}"
        cd "${BUILD_DIR}"
        echo "Running configure to init submodules and configure build..."
        # The documented way: run the configure script from the source tree with -init-submodules
        # Use -submodules to limit the set if provided.
        if [ -n "${{ inputs.submodules }}" ] && [ "${{ inputs.submodules }}" != "qtbase" ]; then
          ../configure -init-submodules -submodules "${{ inputs.submodules }}" -prefix "${{ inputs.dir }}" \
            -release -static -opensource -confirm-license -nomake examples -nomake tests ${{ inputs.configure-args }}
        else
          ../configure -init-submodules -prefix "${{ inputs.dir }}" \
            -release -static -opensource -confirm-license -nomake examples -nomake tests ${{ inputs.configure-args }}
        fi

    - name: "Build Qt (parallel) and install"
      working-directory: ${{ runner.temp }}/qt/build
      shell: bash
      run: |
        set -euo pipefail
        echo "Building Qt (using $(nproc) cores)..."
        cmake --build . --parallel "$(nproc)"
        echo "Installing Qt to ${{ inputs.dir }}..."
        cmake --install .

    - name: "Simple verification"
      shell: bash
      run: |
        set -euo pipefail
        if [ -d "${{ inputs.dir }}" ]; then
          echo "Install dir contents:"
          ls -la "${{ inputs.dir }}" || true
        fi
        if [ -x "${{ inputs.dir }}/bin/qmake" ] || [ -x "${{ inputs.dir }}/bin/qt-cmake" ] || [ -d "${{ inputs.dir }}/lib" ]; then
          echo "Qt build & install likely succeeded."
        else
          echo "Warning: Qt install not detected at ${{ inputs.dir }}. Check earlier logs for errors."
          exit 1
        fi
