name: Build ycaptool (Full Static)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release
  QT_VERSION: 6.8.3

jobs:
  # ====================================================================
  # JOB 1: Build Static Qt from Source
  # ====================================================================
  build-qt-static:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          python3 \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxrender-dev \
          libxcb1-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-icccm4-dev \
          libxcb-sync-dev \
          libxcb-xfixes0-dev \
          libxcb-shape0-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-util-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libdbus-1-dev \
          libwayland-dev \
          wayland-protocols \
          libegl1-mesa-dev \
          libgbm-dev \
          libgles2-mesa-dev \
          libpng-dev \
          libjpeg-dev

    - name: Cache Qt6 source
      id: cache-qt6-source
      uses: actions/cache@v4
      with:
        path: qt6-source
        key: qt6-source-${{ env.QT_VERSION }}-linux

    - name: Download Qt6 source code
      if: steps.cache-qt6-source.outputs.cache-hit != 'true'
      run: |
        echo "Downloading Qt6 ${{ env.QT_VERSION }}"
        VERSION="${{ env.QT_VERSION }}"
        MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1-2)
        
        mkdir -p qt6-source
        cd qt6-source
        
        echo "Downloading qtbase..."
        curl -L -o qtbase.tar.xz "https://download.qt.io/official_releases/qt/$MAJOR_MINOR/$VERSION/submodules/qtbase-everywhere-src-$VERSION.tar.xz"
        tar -xf qtbase.tar.xz
        mv qtbase-everywhere-src-$VERSION qtbase
        rm qtbase.tar.xz
        
        echo "Downloading qtwayland..."
        curl -L -o qtwayland.tar.xz "https://download.qt.io/official_releases/qt/$MAJOR_MINOR/$VERSION/submodules/qtwayland-everywhere-src-$VERSION.tar.xz"
        tar -xf qtwayland.tar.xz
        mv qtwayland-everywhere-src-$VERSION qtwayland
        rm qtwayland.tar.xz
      shell: bash

    - name: Configure CMake for Qt6 Base
      env:
        WORKSPACE: ${{ github.workspace }}
      run: |
        export WORKSPACE_UNIX=${WORKSPACE//\\//}
        mkdir -p qt6-source/build-base
        cd qt6-source/build-base
        cmake ../qtbase \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=$WORKSPACE_UNIX/qt6-install \
          -DBUILD_SHARED_LIBS=OFF \
          -DQT_BUILD_EXAMPLES=OFF \
          -DQT_BUILD_TESTS=OFF \
          -DQT_FEATURE_static=ON \
          -DQT_FEATURE_shared=OFF \
          -DQT_FEATURE_framework=OFF \
          -DQT_FEATURE_dbus=ON \
          -DQT_FEATURE_png=ON \
          -DQT_FEATURE_jpeg=ON \
          -DQT_FEATURE_sql=OFF \
          -DQT_FEATURE_network=OFF \
          -DQT_FEATURE_opengl=ON \
          -DQT_FEATURE_printsupport=OFF \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF
      shell: bash

    - name: Build Qt6 Base
      run: |
        cd qt6-source/build-base
        ninja -j$(nproc)
      shell: bash

    - name: Install Qt6 Base
      run: |
        cd qt6-source/build-base
        ninja install
      shell: bash

    - name: Configure CMake for Qt6 Wayland
      env:
        WORKSPACE: ${{ github.workspace }}
      run: |
        export WORKSPACE_UNIX=${WORKSPACE//\\//}
        mkdir -p qt6-source/build-wayland
        cd qt6-source/build-wayland
        cmake ../qtwayland \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH=$WORKSPACE_UNIX/qt6-install \
          -DCMAKE_INSTALL_PREFIX=$WORKSPACE_UNIX/qt6-install \
          -DBUILD_SHARED_LIBS=OFF \
          -DQT_BUILD_EXAMPLES=OFF \
          -DQT_BUILD_TESTS=OFF
      shell: bash

    - name: Build Qt6 Wayland
      run: |
        cd qt6-source/build-wayland
        ninja -j$(nproc)
      shell: bash

    - name: Install Qt6 Wayland
      run: |
        cd qt6-source/build-wayland
        ninja install
      shell: bash

    - name: Create build artifact
      run: |
        cd ${{ github.workspace }}
        tar -czf qt6-static-linux.tar.gz -C qt6-install .
      shell: bash
      
    - name: Upload Qt6 static build
      uses: actions/upload-artifact@v4
      with:
        name: qt6-static-linux
        path: qt6-static-linux.tar.gz
        retention-days: 1

  # ====================================================================
  # JOB 2: Build ycaptool using the Static Qt
  # ====================================================================
  build-ycaptool:
    runs-on: ubuntu-latest
    needs: build-qt-static

    steps:
      - name: Checkout ycaptool repository
        uses: actions/checkout@v4

      - name: Download static Qt build
        uses: actions/download-artifact@v4
        with:
          name: qt6-static-linux

      - name: Extract Qt build
        run: |
          mkdir -p qt-static
          tar -xzf qt6-static-linux.tar.gz -C qt-static
          rm qt6-static-linux.tar.gz

      - name: Modify .pro for static build
        run: |
          cd packages/ycaptool
          echo "CONFIG += static" >> ycaptool.pro
          echo "QTPLUGIN += qwayland-generic qwayland-egl" >> ycaptool.pro

      - name: Build ycaptool
        run: |
          export PATH=$GITHUB_WORKSPACE/qt-static/bin:$PATH
          
          cd packages/ycaptool
          
          echo "Using qmake from: $(which qmake)"
          qmake ycaptool.pro
          make -j$(nproc)

      - name: Upload ycaptool binary
        uses: actions/upload-artifact@v4
        with:
          name: ycaptool-linux-static
          path: packages/ycaptool/ycaptool